{
  "javascript": {
    "arrayList": {
      "variables": [
        {
          "name": "theItems",
          "type": "ArrayList"
        },
        {
          "name": "theSize",
          "type": "int"
        },
        {
          "name": "old",
          "type": "string"
        },
        {
          "name": "x",
          "type": "string"
        },
        {
          "name": "i",
          "type": "int"
        },
        {
          "name": "j",
          "type": "int"
        },
        {
          "name": "length",
          "type": "int"
        },
        {
          "name": "modCount",
          "type": "int"
        },
        {
          "name": "index",
          "type": "int"
        },
        {
          "name": "removedItem",
          "type": "int"
        }
      ],
      "removeAtPos": {
        "header": "ArrayList.prototype.removeAtPos = function (index) {",
        "lines": [ "    var removedItem = this.theItems[index];", "", "    for (var i = index; i < this.theSize - 1; i++) {", "        this.theItems[i] = this.theItems[i + 1];", "    }", "", "    this.theSize--;", "    this.modCount++;", "", "    return removedItem;", "};" ]
      },
      "add": {
        "header": "ArrayList.prototype.add = function (x) {",
        "lines": [ "    // Ensure capacity", "    if (this.theItems.length == this.size()) {", "        var old = this.theItems;", "        this.theItems = new Array(this.theSize * 2 + 1);", "        for (var i = 0; i < this.size() ; i++)", "            this.theItems[i] = old[i];", "    }", "", "    this.theItems[this.theSize++] = x;", "    this.modCount++;", "", "    return true;", "};" ]
      },
      "addByIndex": {
        "header": "ArrayList.prototype.addIndex = function (index, x) {",
        "lines": [ "    if(index < 0 || index > this.theSize) return false; // Out of bounds", "    // Ensure capacity", "    if (this.theItems.length == this.size()) {", "        var old = this.theItems;", "        this.theItems = new Array(this.theSize * 2 + 1);", "        for (var i = 0; i < this.size() ; i++)", "            this.theItems[i] = old[i];", "    }", "", "    for(var j = this.theSize; j > index; j--) {", "        this.theItems[j] = this.theItems[j-1]", "    }", "    this.theItems[index] = x;", "    this.theSize++;", "    this.modCount++;", "", "    return true;", "};" ]
      }
    },
    "stack": {
      "variables": [
        {"name": "arrayList", "type": "ArrayList" },
        {"name": "element", "type": "string"}
      ],
      "constructor": {
        "header": "function Stack() {",
        "lines": [
          "  this.arrayList = new ArrayList();",
          "}"
        ]
      },
      "isEmpty": {
        "header": "Stack.prototype.isEmpty = function () {",
        "lines": [
          "  return this.arrayList.size() === 0;",
          "}"
        ]
      },
      "makeEmpty": {
        "header": "Stack.prototype.makeEmpty = function () {",
        "lines": [
          "  this.arrayList.clear();",
          "}"
        ]
      },
      "push": {
        "header": "Stack.prototype.push = function (element) {",
        "lines": [
          "  this.arrayList.add(element);",
          "}"
        ]
      },
      "top": {
        "header": "Stack.prototype.top = function () {",
        "lines": [
          "  if (this.isEmpty())",
          "    throw { name: 'UnderflowException', message: 'ArrayList is empty' };",
          "  return this.arrayList.get(this.arrayList.size() - 1);",
          "}"
        ]
      },
      "pop": {
        "header": "Stack.prototype.pop = function () {",
        "lines": [
          "  if(this.isEmpty())",
          "    throw { name: 'UnderflowException', message: 'ArrayList is empty' };",
          "  return this.arrayList.removeAtPos(this.arrayList.size() - 1);",
          "}"
        ]
      }
    },
    "queue": {
      "variables": [
        {
          "name": "theArray",
          "type": "ArrayList"
        },
        {
          "name": "currentSize",
          "type": "int"
        },
        {
          "name": "back",
          "type": "int"
        },
        {
          "name": "x",
          "type": "string"
        },
        {
          "name": "returnVal",
          "type": "string"
        },
        {
          "name": "front",
          "type": "int"
        },
        {
          "name": "length",
          "type": "int"
        }
      ],
      "constructor": {
        "header": "function Queue() {",
        "lines": [
          "  this.theArray = [];",
          "  this.currentSize = 0;",
          "  this.front = 0;",
          "  this.back = -1;",
          "}"
        ]
      },
      "isEmpty": {
        "header": "Queue.prototype.isEmpty = function() {",
        "lines": [
          "  return this.currentSize === 0;",
          "}"
        ]
      },
      "makeEmpty": {
        "header": "Queue.prototype.makeEmpty = function() {",
        "lines": [
          "  this.currentSize = 0;",
          "  this.front = 0;",
          "  this.back = -1;",
          "}"
        ]
      },
      "increment": {
        "header": "Queue.prototype.increment = function(x) {",
        "lines": [
          "  x++;",
          "  if(x === this.theArray.length) {",
          "      x = 0;",
          "  }",
          "  return x;",
          "}"
        ]
      },
      "enqueue": {
        "header": "Queue.prototype.enqueue = function(x) {",
        "lines": [
          "  if (this.currentSize === this.theArray.length) {",
          "      this.doubleQueue();",
          "  }",
          "",
          "  this.back = this.increment(this.back);",
          "  this.theArray[this.back] = x;",
          "  this.currentSize++;",
          "}"
        ]
      },
      "dequeue": {
        "header": "Queue.prototype.dequeue = function() {",
        "lines": [
          "  if(this.isEmpty()) {",
          "      throw {name: 'UnderflowException', message: 'Queue is empty (dequeue)'};",
          "  }",
          "",
          "  this.currentSize--;",
          "  var returnVal = this.theArray[this.front];",
          "  this.front = this.increment(this.front);",
          "  return returnVal;",
          "}"
        ]
      },
      "getFront": {
        "header": "Queue.prototype.getFront = function() {",
        "lines": [
          "  if(this.isEmpty()) {",
          "      throw {name: 'UnderflowException', message: 'Queue is empty (getFront)'};",
          "  }",
          "  return this.theArray[this.front];",
          "}"
        ]
      },
      "doubleQueue": {
        "header": "Queue.prototype.doubleQueue = function() {",
        "lines": [
          "  var newArray = new Array(this.theArray.length * 2);",
          "  for(var i = 0; i < this.currentSize; i++, this.front = this.increment(this.front)) {",
          "      newArray[i] = this.theArray[this.front];",
          "  }",
          "  this.theArray = newArray;",
          "  this.front = 0;",
          "  this.back = this.currentSize - 1;",
          "}"
        ]
      }
    },
    "hanoi": {
      "variables": [
        {
          "name": "disks",
          "type": "int"
        },
        {
          "name": "from",
          "type": "string"
        },
        {
          "name": "to",
          "type": "string"
        },
        {
          "name": "temp",
          "type": "string"
        }
      ],
      "hanoi1": {
        "header": "function hanoi(disks, from, to, temp) {",
        "lines": [
          "    if (disks === 0)",
          "        return;",
          "    hanoi(disks - 1, from, temp, to);",
          "    console.log(\"Moving disc \" + disks + \" from \" + from + \" to \" + to);",
          "    hanoi(disks - 1, temp, to, from);",
          "}"
        ]
      }
    },
    "linkedlist": {
      "variables": [
        {
          "name": "idx",
          "type": "int"
        },
        {
          "name": "data",
          "type": "string"
        },
        {
          "name": "p",
          "type": "string"
        },
        {
          "name": "idx",
          "type": "int"
        },
        {
          "name": "newNode",
          "type": "Node"
        },
        {
          "name": "theSize",
          "type": "int"
        },
        {
          "name": "modCount",
          "type": "int"
        },
        {
          "name": "head",
          "type": "Node"
        },
        {
          "name": "tail",
          "type": "Node"
        },
        {
          "name": "i",
          "type": "int"
        },
        {
          "name": "n",
          "type": "Node"
        },
        {
          "name": "nData",
          "type": "string"
        },
        {
          "name": "x",
          "type": "string"
        }
      ],
      "constructor": {
        "header": "function LinkedList() {",
        "lines": [ "    this.head = new Node(null, null, null);", "    this.tail = new Node(null, this.head, null);", "    this.head.next = this.tail;", "    this.theSize = 0;", "    this.modCount = 0;", "}" ]
      },
      "clear": {
        "header": "LinkedList.prototype.clear = function() {",
        "lines": [ "    this.head = new Node(null, null, null);", "    this.tail = new Node(null, this.head, null);", "    this.head.next = this.tail;", "    this.theSize = 0;", "    this.modCount++;", "};" ]
      },
      "size": {
        "header": "LinkedList.prototype.size = function() {",
        "lines": [ "    return this.theSize;", "};" ]
      },
      "isEmpty": {
        "header": "LinkedList.prototype.isEmpty = function() {",
        "lines": [ "    return this.theSize === 0;", "};" ]
      },
      "add": {
        "header": "LinkedList.prototype.add = function(idx, data) {",
        "lines": [ "    var p = this.getNode(idx);", "    var newNode = new Node(data, p.prev, p);", "    newNode.prev.next = newNode;", "    p.prev = newNode;", "    this.theSize++;", "    this.modCount++;", "};" ]
      },
      "addFirst": {
        "header": "LinkedList.prototype.addFirst = function(data) {",
        "lines": [ "    this.add(0, data);", "};" ]
      },
      "addLast": {
        "header": "LinkedList.prototype.addLast = function(data) {",
        "lines": [ "    this.add(this.size(), data);", "};" ]
      },
      "removeNode": {
        "header": "LinkedList.prototype.removeNode = function(p) {",
        "lines": [ "    p.next.prev = p.prev;", "    p.prev.next = p.next;", "    this.theSize--;", "    this.modCount++;", "    return p.data;", "};" ]
      },
      "removeByIdx": {
        "header": "LinkedList.prototype.removeByIdx = function(idx) {",
        "lines": [ "    var n = this.getNode(idx);", "    var nData = this.removeNode(n)", "    return nData;", "};" ]
      },
      "removeFirst": {
        "header": "LinkedList.prototype.removeFirst = function() {",
        "lines": [ "    if (this.isEmpty()) {", "        throw {name: 'NoSuchElementException', message: \"List is empty.\"};", "    }", "    return this.removeByIdx(0);", "};" ]
      },
      "removeLast": {
        "header": "LinkedList.prototype.removeLast = function() {",
        "lines": [ "    if (this.isEmpty()) {", "        throw {name: \"NoSuchElementException\", message: \"List is empty.\"};", "    }", "    return this.removeByIdx(this.size() - 1);", "};" ]
      },
      "removeByData": {
        "header": "LinkedList.prototype.removeByData = function(data) {",
        "lines": [ "    var pos = this.findPos(data);", "    if (pos == -1) {", "        return false;", "    }", "    else {", "        this.removeNode(pos);", "        return true;", "    }", "};" ]
      },
      "getNode": {
        "header": "LinkedList.prototype.getNode = function(idx) {",
        "lines": [ "    var p;", "    if (idx < this.size() / 2) {", "        p = this.head.next;", "        for (var i = 0; i < idx; i++) {", "            p = p.next;", "        }", "    } else {", "        p = this.tail;", "        for (var i = this.size(); i > idx; i--) {", "            p = p.prev;", "        }", "    }", "    return p;", "};" ]
      },
      "set": {
        "header": "LinkedList.prototype.set = function(idx, newVal) {",
        "lines": [ "    var p = this.getNode(idx);", "    var oldVal = p.data;", "    p.data = newVal;", "    return oldVal;", "};" ]
      },
      "findPos": {
        "header": "LinkedList.prototype.findPos = function(x) {",
        "lines": [ "    for(var p = this.head.next; p !== this.tail; p = p.next) {", "        if (x === null) {", "            if(p.data === null) {", "                return p;", "            }", "        }", "        else if(x === p.data) {", "            return p;", "        }", "    }", "    return -1;", "};" ]
      }
    },
    "fibonacci": {
      "variables": [
        {
          "name": "n",
          "type": "int"
        },
        {
          "name": "nMinusOne",
          "type": "int"
        },
        {
          "name": "nMinusTwo",
          "type": "int"
        },
        {
          "name": "result",
          "type": "int"
        },
        {
          "name": "i",
          "type": "int"
        }
      ],

      "naiveFib": {
        "header": "function naiveFib(n) {",
        "lines": [ "    if (n < 1)", "        throw new { name: \"IllegalArgumentException\", message: \"The Fibonacci numbers start at 1.\" };", "    if (n === 1)", "        return 1;", "    if (n === 2)", "        return 1;", "     ", "    return naiveFib(n - 1) + naiveFib(n - 2);", "}" ]
      },
      "iterativeFib": {
        "header": "function iterativeFib(n) {",
        "lines": [ "    if(n <= 0)", "        throw new { name: \"IllegalArgumentException\", message: \"The Fibonacci numbers start at 1.\" };", "    if (n === 1) return 1;", "    if (n === 2) return 1;", "     ", "    var nMinusOne = 1;", "    var nMinusTwo = 1;", "    var result = 0;", "     ", "    for (var i = 3; i <= n; i++) {", "        result = nMinusOne + nMinusTwo;", "        nMinusTwo = nMinusOne;", "        nMinusOne = result;", "    }", "     ", "    return result;", "}" ]
      },
      "dynFibConstructor": {
        "header": "function FibCalculator(n) {",
        "lines": [ "    this.oldNumbers = Array.apply(null, Array(n)).map(Number.prototype.valueOf, 0);", "    this.result = this.recursiveFib(n);", "}" ]
      },
      "dynFibGetResult": {
        "header": "FibCalculator.prototype.getResult = function () {",
        "lines": [ "    return this.result;", "};" ]
      },
      "recursiveDynFib": {
        "header": "FibCalculator.prototype.recursiveFib = function (n) {",
        "lines": [ "    if (this.oldNumbers[n - 1] != 0) return this.oldNumbers[n - 1];", "    if (n === 1) return 1;", "    if (n === 2) return 1;", "     ", "    this.oldNumbers[n - 1] = this.recursiveFib(n - 1) + this.recursiveFib(n - 2);", "    return this.oldNumbers[n - 1];", "};" ]
      }
    },
    "graph": {
      "dijkstra": {
        "header": "Graph.prototype.dijkstra = function (startName) {",
        "lines": [ "    var pq = new BinaryHeap();", "     ", "    var start = this.vertexMap[startName];", "    if (start === undefined || start === null) {", "        throw { name: \"NoSuchElementException\", message: \"Start vertex not found\" };", "    }", "    this.clearAll();", "    pq.add(new Path(start, 0));", "    start.dist = 0;", "     ", "    var nodesSeen = 0;", "    while (!pq.isEmpty() && nodesSeen < Object.keys(this.vertexMap).length) {", "        var vrec = pq.remove();", "        var v = vrec.dest;", "        if (v.scratch !== 0) { // already processed v", "            continue;", "        }", "        v.scratch = 1;", "        nodesSeen++;", "         ", "        for (var itr = v.adj.iterator(0) ; itr.hasNext() ;) {", "            var e = itr.next();", "            var w = e.dest;", "            var cvw = e.cost;", "             ", "            if (cvw < 0) {", "                throw { name: \"GraphException\", message: \"Graph has negative edges\" };", "            }", "             ", "            if (w.dist > v.dist + cvw) {", "                w.dist = v.dist + cvw;", "                w.prev = v;", "                pq.add(new Path(w, w.dist));", "            }", "        }", "    }", "};" ]
      },
      "bellmanford": {
        "header": "Graph.prototype.negative = function(startName) { // also called the Bellman-Ford algorithm",
        "lines": [ "    this.clearAll();", "     ", "    var start = this.vertexMap[startName];", "    if(start == null) {", "        throw {name: \"NoSuchElementException\", message: \"Start vertex not found\"};", "    }", "     ", "    var q = new LinkedList();", "    q.addLast(start);", "    start.dist = 0;", "    start.scratch++;", "     ", "    while(!q.isEmpty()) {", "        var v = q.removeFirst();", "        if(v.scratch++ > 2 * Object.keys(this.vertexMap).length) {", "            throw {name: \"GraphException\", message: \"Negative cycle detected\"};", "        }", "         ", "        for(var itr = v.adj.iterator(0); itr.hasNext(); ) {", "            var e = itr.next();", "            var w = e.dest;", "            var cvw = e.cost;", "             ", "            if(w.dist > v.dist + cvw) {", "                w.dist = v.dist + cvw;", "                w.prev = v;", "                // Enqueue only if not already on the queue", "                if(w.scratch++ % 2 === 0) {", "                    q.addLast(w);", "                } else {", "                    w.scratch--; // undo the enqueue increment", "                }", "            }", "        }", "    }", "};" ]
      }
    },
    "arraySearch": {
      "variables": [
        {"name": "i", "type": "Int" },
        {"name": "search", "type": "Int" },
        {"name": "array", "type": "Array"},
        {"name": "testIndex", "type": "Int" },
        {"name": "max", "type": "Int" },
        {"name": "min", "type": "Int"},
        {"name": "sortedArray", "type": "Int"}
      ],
      "linearSearch": {
        "header": "function linearSearch(array, search) {",
        "lines": [
          "    for (var i = 0; i < array.length; i++) {",
          "        if (array[i] === search)",
          "            return i;",
          "    }",
          "    return -1;",
          "}"
        ]
      },
      "binarySearch": {
        "header": "function binarySearch(sortedArray, search) {",
        "lines": [
          "    var testIndex = Math.floor(sortedArray.length / 2);",
          "    var max = sortedArray.length - 1;",
          "    var min = 0;",
          "",
          "    if (search > sortedArray[max]) ",
          "        return -1;",
          "    if (search < sortedArray[min]) ",
          "        return -1;",
          "",
          "    while (true) {",
          "        if (sortedArray[testIndex] > search)",
          "            max = testIndex;",
          "        else if (sortedArray[testIndex] === search)",
          "            return testIndex;",
          "        else",
          "            min = testIndex;",
          "",
          "        testIndex = Math.floor((max + min) / 2);",
          "",
          "        if (max - min <= 1) {",
          "            if (sortedArray[max] === search) ",
          "                return max;",
          "            if (sortedArray[min] === search) ",
          "                return min;",
          "            ",
          "            return -1;",
          "        }",
          "    }",
          "}"
        ]
      }
    },
    "binaryTree/binaryNode": {
      "constructor": {
        "header": "function BinaryTree(rootItem) {",
        "lines": [
          "    this.root = null;",
          "",
          "    if (rootItem !== undefined)",
          "        this.root = new BinaryNode(rootItem, null, null);",
          "}"
        ]
      },
      "getRoot": {
        "header": "BinaryTree.prototype.getRoot = function () {",
        "lines": [
          "    return this.root;",
          "};"
        ]
      },
      "size": {
        "header": "BinaryTree.prototype.size = function () {",
        "lines": [
          "    return binaryTreeSize(this.root);",
          "};"
        ]
      },
      "height": {
        "header": "BinaryTree.prototype.height = function () {",
        "lines": [
          "    return binaryTreeHeight(this.root);",
          "};"
        ]
      },
      "printPreOrder": {
        "header": "BinaryNode.prototype.printPreOrder = function () {",
        "lines": [
          "    console.log(this.element);",
          "    if (this.left != null)",
          "        this.left.printPreOrder();",
          "    if (this.right != null)",
          "        this.right.printPreOrder();",
          "};"
        ]
      },
      "printPostOrder": {
        "header": "BinaryNode.prototype.printPostOrder = function () {",
        "lines": [
          "    if (this.left != null)",
          "        this.left.printPostOrder();",
          "    if (this.right != null)",
          "        this.right.printPostOrder();",
          "    console.log(this.element);",
          "};"
        ]
      },
      "printInOrder": {
        "header": "BinaryNode.prototype.printInOrder = function () {",
        "lines": [
          "    if (this.left != null)",
          "        this.left.printInOrder();",
          "    console.log(this.element);",
          "    if (this.right != null)",
          "        this.right.printInOrder();",
          "};"
        ]
      },
      "makeEmpty": {
        "header": "BinaryTree.prototype.makeEmpty = function () {",
        "lines": [
          "    this.root = null;",
          "};"
        ]
      },
      "isEmpty": {
        "header": "BinaryTree.prototype.isEmpty = function () {",
        "lines": [
          "    return this.root == null;",
          "};"
        ]
      },
      "merge": {
        "header": "BinaryTree.prototype.merge = function (rootItem, t1, t2) {",
        "lines": [
          "    if (t1.root == t2.root && t1.root != null)",
          "        throw { name: \"IllegalArgumentException\", message: \"Can't merge two trees with the same root\" };",
          "    ",
          "    // Allocate new node",
          "    this.root = new BinaryNode(rootItem, t1.root, t2.root);",
          "    ",
          "    if (this != t1)",
          "        t1.root = null;",
          "    if (this != t2)",
          "        t2.root = null;",
          "};"
        ]
      }
    },
    "binarySearchTree": {
      "constructor": {
        "header": "function BinarySearchTree() {",
        "lines": [
          "    this.root = null;",
          "}"
        ]
      },
      "insert": {
        "header": "BinarySearchTree.prototype.insert = function (x) {",
        "lines": [
          "    this.root = this.insertNode(x, this.root);",
          "};"
        ]
      },
      "remove": {
        "header": "BinarySearchTree.prototype.remove = function (x) {",
        "lines": [
          "    this.root = this.removeNode(x, this.root);",
          "};"
        ]
      },
      "removeMin": {
        "header": "BinarySearchTree.prototype.removeMin = function () {",
        "lines": [
          "    this.root = this.removeMinNode(this.root);",
          "};"
        ]
      },
      "findMin": {
        "header": "BinarySearchTree.prototype.findMin = function () {",
        "lines": [
          "    return this.elementAt(this.findMinNode(this.root));",
          "};"
        ]
      },
      "findMax": {
        "header": "BinarySearchTree.prototype.findMax = function () {",
        "lines": [
          "    return this.elementAt(this.findMaxNode(this.root));",
          "};"
        ]
      },
      "find": {
        "header": "BinarySearchTree.prototype.find = function (x) {",
        "lines": [
          "    return this.elementAt(this.findNode(x, this.root));",
          "};"
        ]
      },
      "makeEmpty": {
        "header": "BinarySearchTree.prototype.makeEmpty = function () {",
        "lines": [
          "    this.root = null;",
          "};"
        ]
      },
      "isEmpty": {
        "header": "BinarySearchTree.prototype.isEmpty = function () {",
        "lines": [
          "    return this.root == null;",
          "};"
        ]
      },
      "elementAt": {
        "header": "BinarySearchTree.prototype.elementAt = function (t) {",
        "lines": [
          "    return t === null ? null : t.getElement();",
          "};"
        ]
      },
      "findNode": {
        "header": "BinarySearchTree.prototype.findNode = function (x, t) {",
        "lines": [
          "    while (t !== null) {",
          "        if (x - t.getElement() < 0)",
          "            t = t.getLeft();",
          "        else if (x - t.getElement() > 0)",
          "            t = t.getRight();",
          "        else",
          "            return t; // Match",
          "    }",
          "",
          "    return null; // Not Found",
          "};"
        ]
      },
      "findMinNode": {
        "header": "BinarySearchTree.prototype.findMinNode = function (t) {",
        "lines": [
          "    if (t !== null)",
          "        while (t.getLeft() !== null)",
          "            t = t.getLeft();",
          "    return t;",
          "};"
        ]
      },
      "findMaxNode": {
        "header": "BinarySearchTree.prototype.findMaxNode = function (t) {",
        "lines": [
          "    if (t !== null)",
          "        while (t.getRight() !== null)",
          "            t = t.getRight();",
          "    return t;",
          "};"
        ]
      },
      "insertNode": {
        "header": "BinarySearchTree.prototype.insertNode = function (x, t) {",
        "lines": [
          "    if (t === null)",
          "        t = new BinaryNode(x);",
          "    else if (x - t.getElement() < 0)",
          "        t.setLeft(this.insertNode(x, t.getLeft()));",
          "    else if (x - t.getElement() > 0)",
          "        t.setRight(this.insertNode(x, t.getRight()));",
          "    else",
          "        throw { name: \"DuplicateItemException\", message: \"Duplicate items are not allowed\" };",
          "    return t;",
          "};"
        ]
      },
      "removeMinNode": {
        "header": "BinarySearchTree.prototype.removeMinNode = function (t) {",
        "lines": [
          "    if (t === null)",
          "        throw { name: \"ItemNotFoundException\", message: \"The item was not found\" };",
          "    else if (t.getLeft() !== null) {",
          "        t.setLeft(this.removeMinNode(t.getLeft()));",
          "        return t;",
          "    }",
          "    else",
          "        return t.getRight();",
          "};"
        ]
      },
      "removeNode": {
        "header": "BinarySearchTree.prototype.removeNode = function (x, t) {",
        "lines": [
          "    if (t === null)",
          "        throw { name: \"ItemNotFoundException\", message: \"The item was not found\" };",
          "    if (x - t.getElement() < 0)",
          "        t.setLeft(this.removeNode(x, t.getLeft()));",
          "    else if (x - t.getElement() > 0)",
          "        t.setRight(this.removeNode(x, t.getRight()));",
          "    else if (t.getLeft() !== null && t.getRight() !== null) { // Two children",
          "        t.setElement(this.findMinNode(t.getRight()).getElement());",
          "        t.setRight(this.removeMinNode(t.getRight()));",
          "    }",
          "    else",
          "        t = (t.getLeft() !== null) ? t.getLeft() : t.getRight();",
          "    return t;",
          "};"
        ]
      }
    },
    "insertionSort": {
      "variables": [
        {
          "name": "a",
          "type": "int"
        },
        {
          "name": "p",
          "type": "int"
        },
        {
          "name": "tmp",
          "type": "string"
        },
        {
          "name": "j",
          "type": "int"
        }
      ],
      "insertionSort": {
        "header": "function insertionSort(a) {",
        "lines": [ "    for(var p = 1; p < a.length; p++) {", "        var tmp = a[p];", "        var j = p;", "", "        for(; j > 0 && tmp < a[j - 1]; j--) {", "            a[j] = a[j - 1];", "        }", "", "        a[j] = tmp;", "    }", "", "    return a;", "}" ]
      }
    },
    "mergeSort": {
      "variables": [
        {
          "name": "a",
          "type": "Array"
        },
        {
          "name": "left",
          "type": "int"
        },
        {
          "name": "right",
          "type": "int"
        },
        {
          "name": "center",
          "type": "int"
        },
        {
          "name": "leftPos",
          "type": "int"
        },
        {
          "name": "leftEnd",
          "type": "int"
        },
        {
          "name": "rightPos",
          "type": "int"
        },
        {
          "name": "rightEnd",
          "type": "int"
        },
        {
          "name": "tmpArray",
          "type": "Array"
        },
        {
          "name": "tmpPos",
          "type": "int"
        },
        {
          "name": "numElements",
          "type": "int"
        },
        {
          "name": "i",
          "type": "int"
        }
      ],

      "mergeSort": {
        "header": "MergeSort.prototype.mergeSort = function(left, right) {",
        "lines": [ "    if(left < right) {", "        var center = parseInt((left + right) / 2);", "        this.mergeSort(this.a, left, center);", "        this.mergeSort(this.a, center + 1, right);", "        this.merge(this.a, left, center + 1, right);", "    }", "};" ]
      },
      "merge": {
        "header": "MergeSort.prototype.merge = function(a, leftPos, rightPos, rightEnd) {",
        "lines": [ "    var tmpArray = [];", "    var leftEnd = rightPos - 1;", "    var tmpPos = leftPos;", "    var numElements = rightEnd - leftPos + 1;", "", "    while(leftPos <= leftEnd && rightPos <= rightEnd) {", "        if(this.a[leftPos] <= this.a[rightPos]) {", "            tmpArray[tmpPos++] = this.a[leftPos++];", "        }", "        else {", "            tmpArray[tmpPos++] = this.a[rightPos++];", "        }", "    }", "", "    while(leftPos <= leftEnd) {", "        tmpArray[tmpPos++] = this.a[leftPos++];", "    }", "", "    while(rightPos <= rightEnd) {", "        tmpArray[tmpPos++] = this.a[rightPos++];", "    }", "", "    for(var i = 0; i < numElements; i++, rightEnd--) {", "        a[rightEnd] = tmpArray[rightEnd];", "    }", "};" ]
      }
    },
    "bubbleSort": {
      "variables": [
        {
          "name": "n",
          "type": "int"
        },
        {
          "name": "array",
          "type": "Array"
        },
        {
          "name": "length",
          "type": "int"
        },
        {
          "name": "newN",
          "type": "int"
        },
        {
          "name": "i",
          "type": "int"
        },
        {
          "name": "tmp",
          "type": "string"
        }
      ],

      "bubbleSort": {
        "header": "function bubbleSort(array) {",
        "lines": [ "    var n = array.length;", "    while(n > 0) {", "        var newN = 0;", "        for (var i = 1; i < n; i++) {", "            if (array[i - 1] > array[i]) {", "                var tmp = array[i];", "                array[i] = array[i - 1];", "                array[i - 1] = tmp;", "                newN = i;", "            }", "        }", "        n = newN;", "    }", "", "    return array;", "}" ]
      }
    },
    "quickSort": {
      "variables": [
        {
          "name": "low",
          "type": "int"
        },
        {
          "name": "high",
          "type": "int"
        },
        {
          "name": "a",
          "type": "Array"
        },
        {
          "name": "p",
          "type": "int"
        },
        {
          "name": "pivot",
          "type": "int"
        },
        {
          "name": "i",
          "type": "int"
        },
        {
          "name": "j",
          "type": "int"
        },
        {
          "name": "tmp",
          "type": "int"
        },
        {
          "name": "middle",
          "type": "int"
        }
      ],
      "quickSortMedianOfThree": {
        "header": "QuickSort.prototype.quickSortMedianOfThree = function (low, high) {",
        "lines": [ "    if (low < high) {", "        if (high - low < 4) {", "            this.a = insertionSort(this.a, low, high + 1);", "        }", "        else {", "            var middle = Math.floor(parseInt(low + high) / 2);", "            if (this.a[middle] < this.a[low]) {", "                this.a = swapReferences(this.a, low, middle);", "            }", "            if (this.a[high] < this.a[low]) {", "                this.a = swapReferences(this.a, low, high);", "            }", "            if (this.a[high] < this.a[middle]) {", "                this.a = swapReferences(this.a, middle, high);", "            }", "            this.a = swapReferences(this.a, middle, high - 1);", "", "            var p = this.partition(low, high);", "            this.quickSortMedianOfThree(low, p);", "            this.quickSortMedianOfThree(p + 1, high);", "        }", "    }", "};" ]
      },
      "quickSortLeftPivot": {
        "header": "QuickSort.prototype.quickSortLeftPivot = function (low, high) {",
        "lines": [ "    if (low < high) {", "        if (high - low < 4) {", "            this.a = insertionSort(this.a, low, high + 1);", "        }", "        else {", "            var p = this.partition(low, high);", "            this.quickSortLeftPivot(low, p);", "            this.quickSortLeftPivot(p + 1, high);", "        }", "    }", "};" ]
      },
      "insertionSort": {
        "header": "function insertionSort(a, low, high) {",
        "lines": [ "    for (var p = low + 1; p < high; p++) {", "        var tmp = a[p];", "        var j = p;", "", "        for (; j > low && tmp < a[j - 1]; j--) {", "            a[j] = a[j - 1];", "        }", "", "        a[j] = tmp;", "    }", "", "    return a;", "}" ]
      },
      "partition": {
        "header": "QuickSort.prototype.partition = function (low, high) {",
        "lines": [ "    var pivot = this.a[high - 1];", "", "    var i, j;", "    for (i = low - 1, j = high + 1; ;) {", "        while (this.a[++i] < pivot) { }", "", "        while (pivot < this.a[--j]) { }", "", "        if (i >= j)", "            return j;", "", "        this.a = swapReferences(this.a, i, j);", "    }", "};" ]
      }
    },
    "shellSort": {
      "variables": [
        {
          "name": "a",
          "type": "Array"
        },
        {
          "name": "length",
          "type": "int"
        },
        {
          "name": "gap",
          "type": "int"
        },
        {
          "name": "i",
          "type": "int"
        },
        {
          "name": "j",
          "type": "int"
        },
        {
          "name": "tmp",
          "type": "string"
        }
      ],

      "shellSort": {
        "header": "function shellSort(a) {",
        "lines": ["    for(var gap = parseInt(a.length / 2); gap > 0;", "        gap = gap === 2 ? 1 : parseInt(gap / 2.2)) {", "", "        for(var i = gap; i < a.length; i++) {", "            var tmp = a[i];", "", "            for(var j = i; j >= gap && tmp < a[j - gap]; j-= gap) {", "                a[j] = a[j - gap];", "            }", "", "            a[j] = tmp;", "        }", "    }", "", "    return a;", "}" ]
      }
    },
    "countingSort": {
      "variables": [
        {
          "name": "array",
          "type": "Array"
        },
        {
          "name": "maxValue",
          "type": "int"
        },
        {
          "name": "valueCount",
          "type": "Array"
        },
        {
          "name": "value",
          "type": "int"
        },
        {
          "name": "i",
          "type": "int"
        },
        {
          "name": "result",
          "type": "Array"
        },
        {
          "name": "index",
          "type": "int"
        },
        {
          "name": "j",
          "type": "int"
        }
      ],

      "countingSort": {
        "header": "function countingSort(array, maxValue) {",
        "lines": [ "    if (array.constructor !== Array || array.length == 0)", "        return [];", "", "    var valueCount = Array.apply(null, Array(maxValue)).map(Number.prototype.valueOf, 0);", "    var value;", "", "    for (var i = 0; i < array.length; i++) {", "        value = array[i];", "        valueCount[value] += 1;", "    }", "", "    var result = new Array(array.list);", "    var index = 0;", "    for (var i = 0; i < valueCount.length; i++) {", "        for (var j = 0; j < valueCount[i]; j++) {", "            result[index] = i;", "            index++;", "        }", "    }", "", "    return result;", "}" ]
      }
    },
    "hashSet": {
      "remove": {
        "header": "HashSet.prototype.remove = function (x) {",
        "lines": [ "    var currentPos = this.findPos(x);", "    if (!this.isActive(this.array, currentPos))", "        return false;", "", "    this.array[currentPos].isActive = false;", "    this.currentSize--;", "    this.modCount++;", "", "    if (this.currentSize < this.array.length / 8)", "        this.rehash();", "", "    return true;", "};" ]
      },
      "add": {
        "header": "HashSet.prototype.add = function (x) {",
        "lines": [ "    var currentPos = this.findPos(x);", "    if (this.isActive(this.array, currentPos))", "        return false;", "", "    if (this.array[currentPos] == null)", "        this.occupied++;", "    this.array[currentPos] = new HashEntry(x, true);", "    this.currentSize++;", "    this.modCount++;", "", "    if (this.occupied > this.array.length / 2)", "        this.rehash();", "", "    return true;", "};" ]
      },
      "rehash": {
        "header": "HashSet.prototype.rehash = function () {",
        "lines": [ "    var oldArray = this.array;", "", "    // Create new empty table", "    this.allocateArray(nextPrime(4 * this.size()));", "    this.currentSize = 0;", "    this.occupied = 0;", "", "    // Copy table over", "    for (var i = 0; i < oldArray.length; i++)", "        if (this.isActive(oldArray, i))", "            this.add(oldArray[i].element);", "};" ]
      }
    }
  }
}
