{
  "categories": [
    {
      "id": "collections",
      "name": "Collections",
      "image": "https://dummyimage.com/400x300/6e5055/ffffff.png&text=Collection",
      "description": "A collection is a set of related data, stored using a defined structure such as lists. Each collection has its own methods for data retrieval and manipulation.",
      "subCategories": [
        {
          "id": "arraylist",
          "name": "Array List",
          "commands": [
            {
              "name": "Create",
              "function": "initializeArray",
              "arguments": [
                {
                  "type": "array",
                  "name": "Data",
                  "placeholder": "1,2,3..."
                }
              ]
            },
            {
              "name": "Add",
              "function": "runAdd",
              "arguments": [
                {
                  "type": "string",
                  "name": "Value",
                  "placeholder": "Value"
                }
              ]
            },
            {
              "name": "Add to index",
              "function": "runAddByIndex",
              "arguments": [
                {
                  "type": "int",
                  "name": "Index",
                  "placeholder": "Index"
                },
                {
                  "type": "string",
                  "name": "value",
                  "placeholder": "Value"
                }
              ]
            },
            {
              "name": "Remove",
              "function": "runRemove",
              "arguments": [
                {
                  "type": "int",
                  "name": "Index",
                  "placeholder":  "Index"
                }
              ]
            }
          ]
        },
        {
          "id": "linkedlist",
          "name": "Linked List",
          "commands": [
            {
              "name": "Create",
              "function": "fastInitialize",
              "arguments": [
                {
                  "type": "array",
                  "name": "arrayValues",
                  "placeholder": "1,2,3..."
                }
              ]
            },
            {
              "name": "Initialize",
              "function": "initialize"
            },
            {
              "name": "Add",
              "function": "addByIndex",
              "arguments": [
                {
                  "type": "int",
                  "name": "Index",
                  "placeholder": "Index"
                },
                {
                  "type": "string",
                  "name": "value",
                  "placeholder": "Value"
                }
              ]
            },
            {
              "name": "Remove",
              "function": "removeNode",
              "arguments": [
                {
                  "type": "int",
                  "name": "Index",
                  "placeholder": "Index"
                }
              ]
            },
            {
              "name": "Get Node",
              "function": "getNode",
              "arguments": [
                {
                  "type": "int",
                  "name": "Index",
                  "placeholder": "Index"
                }
              ]
            },
            {
              "name": "Find Position",
              "function": "findPos",
              "arguments": [
                {
                  "type": "string",
                  "name": "Data",
                  "placeholder": "Data"
                }
              ]
            }
          ]
        },
        {
          "id": "stack",
          "name": "Stack",
          "commands": [
            {
              "name": "Create",
              "function": "initStack",
              "arguments": [
                {
                  "type": "array",
                  "name": "arrayValues",
                  "placeholder": "1,2,3..."
                }
              ]
            },
            {
              "name": "Push",
              "function": "pushElement",
              "arguments": [
                {
                  "type": "string",
                  "name": "pushValue",
                  "placeholder": "123"
                }
              ]
            },
            {
              "name": "Pop",
              "function": "popElement"
            }
          ]
        },
        {
          "id": "queue",
          "name": "Queue",
          "commands": [
            {
              "name": "Create",
              "function": "initQueue",
              "arguments": [
                {
                  "type": "array",
                  "name": "arrayValues",
                  "placeholder": "1,2,3..."
                }
              ]
            },
            {
              "name": "Enqueue",
              "function": "enqueue",
              "arguments": [
                {
                  "type": "string",
                  "name": "enqueueValue",
                  "placeholder": "123"
                }
              ]
            },
            {
              "name": "Dequeue",
              "function": "dequeue"
            }
          ]
        },
        {
          "id": "hash",
          "name": "Hash Set",
          "commands": [
            {
              "name": "Add",
              "function": "runAdd",
              "arguments": [
                {
                  "type": "string",
                  "name": "Value",
                  "placeholder": "Value"
                },
                {
                  "type": "string",
                  "name": "Probing",
                  "placeholder": "Probing",
                  "options": [ "Linear", "Quadratic" ]
                },
                {
                  "type": "string",
                  "name": "Hash Function",
                  "placeholder": "HashFunc",
                  "options": [ "Simple", "Object Hash" ]
                }
              ]
            },
            {
              "name": "Remove",
              "function": "runRemove",
              "arguments": [
                {
                  "type": "string",
                  "name": "Value",
                  "placeholder": "Value"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "sorting",
      "name": "Sorting",
      "image": "https://dummyimage.com/400x300/6e5055/ffffff.png&text=Sorting",
      "description": "Sorting algorithms are used to put data in a specific order based on the value of the data. There are different ways of sorting which all have advantages and disadvantages in relation to each other.",
      "subCategories": [
        {
          "id": "insertionsort",
          "name": "Insertion Sort",
          "commands": [
            {
              "name": "Create",
              "function": "createArray",
              "arguments": [
                {
                  "type": "array",
                  "name": "Data",
                  "placeholder": "5,2,3..."
                }
              ]
            },
            {
              "name": "Sort",
              "function": "startSorting"
            }
          ]
        },
        {
          "id": "mergesort",
          "name": "Merge Sort",
          "commands": [
            {
              "name": "Create",
              "function": "createArray",
              "arguments": [
                {
                  "type": "array",
                  "name": "Data",
                  "placeholder": "1,2,3"
                }
              ]
            },
            {
              "name": "Sort",
              "function": "sort"
            }
          ]
        },
        {
          "id": "bubblesort",
          "name": "Bubble Sort",
          "commands": [
            {
              "name": "Create",
              "function": "createArray",
              "arguments": [
                {
                  "type": "array",
                  "name": "Data",
                  "placeholder": "1,2,3..."
                }
              ]
            },
            {
              "name": "Sort",
              "function": "startSorting"
            }
          ]
        },
        {
          "id": "quicksort",
          "name": "Quick Sort",
          "commands": [
            {
              "name": "Sort (Median of 3)",
              "function": "startMedianOfThree"
            },
            {
              "name": "Sort (Pivot left)",
              "function": "startMedianOfOne"
            }
          ]
        },
        {
          "id": "shellsort",
          "name": "Shell Sort",
          "commands": [
            {
              "name": "Create",
              "function": "createArray",
              "arguments": [
                {
                  "type": "array",
                  "name": "Data",
                  "placeholder": "5,2,3..."
                }
              ]
            },
            {
              "name": "Sort",
              "function": "startSorting"
            }
          ]
        },
        {
          "id": "countingsort",
          "name": "Counting Sort",
          "commands": [
            {
              "name": "Create",
              "function": "createArray",
              "arguments": [
                {
                  "type": "array",
                  "name": "Data",
                  "placeholder": "5,2,3..."
                }
              ]
            },
            {
              "name": "Sort",
              "function": "startSorting"
            }
          ]
        }
      ]
    },
    {
      "id": "trees",
      "name": "Trees",
      "image": "https://dummyimage.com/400x300/6e5055/ffffff.png&text=Trees",
      "description": "Trees are a type of collection which stores data in a hierarchy similar to a tree. The root node is the base and the tree splits up in different branches as it grows.",
      "subCategories": [
        {
          "id": "binarytree",
          "name": "Binary Tree",
          "info":  "A new left-child node is created by clicking on a node. In order to create a right-child node, Alt+Click on a node. Leaf nodes can be deleted by Shift-Clicking.", 
          "commands": [
            {
              "name": "Pre Order",
              "function": "visualizePreOrder"
            },
            {
              "name": "In Order",
              "function": "visualizeInOrder"
            },
            {
              "name": "Post Order",
              "function": "visualizePostOrder"
            }
          ]
        },
        {
          "id": "binarysearchtree",
          "name": "Binary Search Tree",
          "commands": [
            {
              "name": "Insert",
              "function": "visualizeInsert",
              "arguments": [
                {
                  "type": "int",
                  "name": "Integer",
                  "placeholder": "Integer"
                }
              ]
            },
            {
              "name": "Find",
              "function": "visualizeSearch",
              "arguments": [
                {
                  "type": "int",
                  "name": "Integer",
                  "placeholder": "Integer"
                }
              ]
            },
            {
              "name": "Remove",
              "function": "visualizeRemove",
              "arguments": [
                {
                  "type": "int",
                  "name": "Integer",
                  "placeholder": "Integer"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "graphs",
      "name": "Graphs",
      "image": "https://dummyimage.com/400x300/6e5055/ffffff.png&text=Graphs",
      "description": "Graphs are similar to trees, but are less restrictive. They are not hierarchical, meaning any node can connect to any other node.",
      "subCategories": [
        {
          "id": "dijkstra",
          "name": "Dijkstra",
          "info": "Click anywhere to create a new node. Clicking and dragging from one node to another will create an edge between them. Clicking on an existing node or edge highlights it. Once highlighted it may be deleted by pressing 'backspace' or 'delete'. Pressing the 'D' key while an edge is highlighted will change its direction. The edge weights may be adjusted by clicking on them, typing the new value and pressing 'enter'. CTRL+Click dragging on a node moves the node around the graph.",
          "commands": [
            {
              "name": "Shortest Path",
              "function": "performCurrentPathfinding",
              "arguments": [
                {
                  "type": "int",
                  "name": "Start",
                  "placeholder": "Start"
                },
                {
                  "type": "int",
                  "name": "End",
                  "placeholder": "End"
                }
              ]
            }
          ]
        },
        {
          "id": "bellmanford",
          "name": "Bellman-Ford",
          "info": "Click anywhere to create a new node. Clicking and dragging from one node to another will create an edge between them. Clicking on an existing node or edge highlights it. Once highlighted it may be deleted by pressing 'backspace' or 'delete'. Pressing the 'D' key while an edge is highlighted will change its direction. The edge weights may be adjusted by clicking on them, typing the new value and pressing 'enter'. CTRL+Click dragging on a node moves the node around the graph.",
          "commands": [
            {
              "name": "Shortest Path",
              "function": "performCurrentPathfinding",
              "arguments": [
                {
                  "type": "int",
                  "name": "Start",
                  "placeholder": "Start"
                },
                {
                  "type": "int",
                  "name": "End",
                  "placeholder": "End"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "other",
      "name": "Other",
      "image": "https://dummyimage.com/400x300/6e5055/ffffff.png&text=Other",
      "description": "This category contains algorithms that do not fit in the other categories, in addition to practical implementations of important algorithms.",
      "subCategories": [
        {
          "id": "towerofhanoi",
          "name": "Tower of Hanoi",
          "commands": [
            {
              "name": "Solve",
              "function": "doHanoi",
              "arguments": [
                {
                  "type": "int",
                  "name": "Disks",
                  "placeholder": "Disks",
                  "options": [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
                },
                {
                  "type": "string",
                  "name": "Start",
                  "placeholder": "Start",
                  "options": [ "A", "B", "C" ]
                },
                {
                  "type": "string",
                  "name": "End",
                  "placeholder": "End",
                  "options": [ "A", "B", "C" ]
                }
              ]
            }
          ]
        },
        {
          "id": "fibonacci",
          "name": "Fibonacci",
          "commands": [
            {
              "name": "Iterative",
              "function": "runIterativeFib",
              "arguments": [
                {
                  "type": "int",
                  "name": "n",
                  "placeholder": "Integer"
                }
              ]
            },
            {
              "name": "Recursive",
              "function": "runNaiveFib",
              "arguments": [
                {
                  "type": "int",
                  "name": "n",
                  "placeholder": "Integer"
                }
              ]
            }
          ]
        },
        {
          "id": "dijkstramap",
          "name": "Practical Dijkstra",
          "info": "Two nodes on the map must be selected on the map before finding the path. The button in the lower right corner toggles whether or not the view automatically pans to the current node the algorithm is considering.", 
          "commands": [
            {
              "name": "Find Path",
              "function": "start"
            }
          ]
        },
        {
          "id": "filetree",
          "name": "File Tree"
        },
        {
          "id": "arraysearch",
          "name": "Array Search",
          "commands": [
            {
              "name": "Create",
              "function": "setArray",
              "arguments": [
                {
                  "type": "array",
                  "name": "Data",
                  "placeholder": "1,2,3..."
                }
              ]
            },
            {
              "name": "Linear Search",
              "function": "visualizeLinearSearch",
              "arguments": [
                {
                  "type": "int",
                  "name": "Integer",
                  "placeholder": "82"
                }
              ]
            },
            {
              "name": "Binary Search",
              "function": "visualizeBinarySearch",
              "arguments": [
                {
                  "type": "int",
                  "name": "Integer",
                  "placeholder": "82"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}